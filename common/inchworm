#!/usr/bin/env python

import sys, os, time
sys.path.append(os.getcwd() + "/..")
sys.path.append(os.getcwd() + "/../../common")
from model import *
import numpy as np

from h5 import HDFArchive
from triqs.utility import mpi
from inchworm import * # Solver, version

# --------- Construct the CTHYB solver ----------
constr_params = {
        'beta' : beta,
        'gf_struct' : gf_struct,
        'n_iw' : n_iw,
        'n_tau_green' : n_tau,
        'n_tau_inch' : 100,
        'n_tau' : 10001
        }
S = Solver(**constr_params)

# --------- Initialize Delta_tau ----------
# S.Delta_tau << Fourier(Delta) # Not possible as Delta_tau is purely real
for bl in spin_names:
    S.Delta_tau[bl] << make_gf_from_fourier(Delta[bl], constr_params['n_tau']).real

# --------- Solve! ----------
assert(h_imp - h_imp.real == 0.0 * n('up', 0))
solve_params = {
        'h_imp' : h_imp.real,
        'n_cycles' : 10000,
        'measure_order_histogram' : True,
        #'length_cycle' : 100,
        #'n_callibration_cycles' : 100,
        #'verbosity' : 3 if mpi.is_master_node() else 0
        }
start = time.time()
# S.solve(**solve_params)
S.solve_inchworm(**solve_params)
S.solve_green(**solve_params)
end = time.time()

# -------- Save in archive ---------
if mpi.is_master_node():
    with HDFArchive("../results/inchworm.h5",'w') as results:
        results["G"] = S.G_tau

        import inspect
        import __main__
        results.create_group("Solver_Info")
        info_grp = results["Solver_Info"]
        info_grp["solver_name"] = "inchworm"
        info_grp["constr_params"] = constr_params
        info_grp["solve_params"] = solve_params
        info_grp["solver"] = S
        #info_grp["solver_version"] = version.version
        #info_grp["solver_git_hash"] = version.inchworm_hash
        #info_grp["triqs_git_hash"] = version.triqs_hash
        info_grp["script"] = inspect.getsource(__main__)
        info_grp["num_threads"] = mpi.world.Get_size()
        info_grp["run_time"] = end - start
