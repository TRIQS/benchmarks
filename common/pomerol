#!/usr/bin/env python

import sys, os, time
sys.path.append(os.getcwd() + "/..")
sys.path.append(os.getcwd() + "/../../common")
from model import *
import util

from h5 import HDFArchive
from triqs.utility import mpi
from pomerol2triqs import PomerolED

# --------- Construct the ED solver ----------
get_idx_tpl = lambda x: tuple(next(iter(x))[0][0][1])
op_indices = list(map(get_idx_tpl, util.get_fundamental_operators(h_tot)))

index_converter = {}

for spin, orb in op_indices:
    # Bath degrees of freedom
    if isinstance(orb, str) and 'b_' in orb:
        index_converter[(spin, orb)] = ("bath", int(orb.split('_')[1]), "up" if spin == "up" else "down")
    # Local degrees of freedom
    else:
        index_converter[(spin, orb)] = ("loc", orb, "up" if spin == "up" else "down")

ed = PomerolED(index_converter, verbose = True)

start = time.time()
# --------- Calculate the single-particle Green function ----------
ed.diagonalize(h_tot)
G_iw = ed.G_iw([(bl, idx_lst) for bl, idx_lst in gf_struct], beta, n_iw)

# --------- Calculate chi3 ----------
solve_params = {
  'gf_struct': gf_struct,
  'beta': beta,
  'n_inu': n_iw,
  'block_order': 'AABB'
}

chi3pp_iw = ed.chi3_inu_inup(**solve_params, channel='PP')
chi3ph_iw = ed.chi3_inu_inup(**solve_params, channel='PH')
end = time.time()

# -------- Save in archive ---------
if mpi.is_master_node():
    with HDFArchive("../results/pomerol.h5",'w') as results:
        results["G"] = G_iw
        results["chi3pp_iw"] = chi3pp_iw
        results["chi3ph_iw"] = chi3ph_iw

        import inspect
        import __main__
        results.create_group("Solver_Info")
        info_grp = results["Solver_Info"]
        info_grp["solver_name"] = "pomerol"
        info_grp["solve_params"] = solve_params
        info_grp["script"] = inspect.getsource(__main__)
        info_grp["num_threads"] = mpi.size
        info_grp["run_time"] = end - start
