#!/usr/bin/env python


import sys, os
sys.path.append(os.getcwd() + "/..")
sys.path.append(os.getcwd() + "/../../common")
from model import *
import util

from h5 import HDFArchive
from triqs.utility import mpi
from pyed.TriqsExactDiagonalization import TriqsExactDiagonalization

# --------- Construct the ED solver ----------
fundamental_operators = util.get_fundamental_operators(h_tot)
ed = TriqsExactDiagonalization(h_tot, fundamental_operators, beta)
print("Free energy ", ed.get_free_energy())

# --------- Calculate the single-particle Green function ----------
G_iw = G0_iw.copy()

for bl, bl_size in gf_struct:
    for i, j in product(range(bl_size), range(bl_size)):
        ed.set_g2_iwn(G_iw[bl][i,j], c(bl,i), c_dag(bl,j))

# --------- Calculate chi3 ----------
n_tau = 10 * (2 * n_iw + 1)
tau_mesh = MeshImTime(beta, 'Fermion', n_tau)
chi3pp_tau = Block2Gf_from_struct(mesh=MeshProduct(tau_mesh, tau_mesh), struct=gf_struct)
chi3ph_tau = chi3pp_tau.copy()

for (bl1, bl1_size), (bl2, bl2_size) in product(gf_struct, gf_struct):
    ed.set_g3_tau(  chi3pp_tau[(bl1, bl2)][0,0,0,0], \
                    c_dag(bl1,0), c_dag(bl2,0), c(bl1,0) * c(bl2,0) )
    chi3pp_tau[(bl1,bl2)] *= -1.0  # Resort operators, since we want <cdag c(0^{+}) cdag c(0)>
    ed.set_g3_tau(  chi3ph_tau[(bl1, bl2)][0,0,0,0], \
                    c_dag(bl1,0), c(bl1,0), c_dag(bl2,0) * c(bl2,0) )

chi3pp_iw = Block2Gf_from_fourier2D(chi3pp_tau, n_iw, gf_struct)
chi3ph_iw = Block2Gf_from_fourier2D(chi3ph_tau, n_iw, gf_struct)

# -------- Save in archive ---------
with HDFArchive("../results/pyed.h5",'w') as res:
    res["G"] = G_iw
    res["chi3pp_iw"] = chi3pp_iw
    res["chi3ph_iw"] = chi3ph_iw
