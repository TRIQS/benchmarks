#!/usr/bin/env python

import sys, os
import numpy as np
sys.path.append(os.getcwd() + "/..")
sys.path.append(os.getcwd() + "/../../common")
from model import *

from pytriqs.archive import HDFArchive
from pytriqs.utility import mpi
from triqs_ctseg import version
from triqs_ctseg import SolverCore as Solver

from pytriqs.gf.gf_fnt import *

# --------- Construct the CTHYB solver ----------
constr_params = {
        'beta' : beta,
        'gf_struct' : gf_struct,
        #'n_iw' : 20,
        'n_iw' : n_iw,
        'n_tau' : 100001
        }
S = Solver(**constr_params)

# --------- Initialize G0_iw ----------
S.G0_iw << G0_iw

# --------- Solve! ----------
solve_params = {
        'h_int' : h_int,
        'n_warmup_cycles' : 1000,
        'n_cycles' : 100000,
        'length_cycle' : 100,
        }
S.solve(**solve_params)

# -------- Save in archive ---------
if mpi.is_master_node():
    with HDFArchive("../results/ctseg.h5",'w') as results:
        G_iw = BlockGf(mesh=iw_mesh, gf_struct=gf_struct)
        G_iw << Fourier(S.G_tau)
        results["G"] = G_iw

        import inspect
        import __main__
        results.create_group("Solver_Info")
        info_grp = results["Solver_Info"]
        info_grp["solver_name"] = "triqs_cthyb"
        info_grp["constr_params"] = constr_params
        info_grp["solve_params"] = solve_params
        # info_grp["solver"] = S
        info_grp["solver_version"] = version.version
        info_grp["solver_git_hash"] = version.ctseg_hash
        info_grp["triqs_git_hash"] = version.triqs_hash
        info_grp["script"] = inspect.getsource(__main__)
        info_grp["num_threads"] = mpi.world.Get_size()
